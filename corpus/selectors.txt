=========================
Universal selectors
=========================

* {}

---

(stylesheet
  (rule_set (selectors (universal_selector)) (block)))

=========================
Type selectors
=========================

div, span {}
h1, h2, h3, h4 {}

---

(stylesheet
  (rule_set (selectors (tag_name) (tag_name)) (block))
  (rule_set (selectors (tag_name) (tag_name) (tag_name) (tag_name)) (block)))

=========================
Class selectors
=========================

.class-a {}
div.class-b, .class-c.class-d {}

---

(stylesheet
  (rule_set
    (selectors (class_selector (class_name)))
    (block))
  (rule_set
    (selectors
      (compound_selector (tag_name) (class_selector (class_name)))
      (compound_selector (class_selector (class_name)) (class_selector (class_name))))
    (block)))


=========================
Detached rulesets
=========================

@example: {}

@nested-example: {
  @inner: {}
}
---

(stylesheet
  (variable_def
    (variable (variable_name))
    (block))
  (variable_def
    (variable (variable_name))
    (block
      (variable_def
        (variable (variable_name))
        (block))))
  )

=========================
Maps
=========================

@nested-example: {
  @inner: {
    element: value;
  }
}

@example: @nested-example[@@inner][value];

---

(stylesheet
  (variable_def
    (variable (variable_name))
    (block
      (variable_def
        (variable (variable_name))
        (block
          (declaration (property_name) (plain_value))))))
  (variable_def
    (variable (variable_name))
    (index_expression
      (index_expression
        (variable (variable_name))
        (expand_variable (variable_name)))
      (property_name)))
  )

=========================
Interpolated Variables
=========================

@ba: ba;
@bare: @{ba};
@prefix: ke-@{ba};
@suffix: @{ba}-b;
@kebab: ke-@{ba}-b;

@id: id;
@bare: @{id};
@prefix: pre@{id};
@suffix: @{id}suf;
@sandwich: pre@{id}suf;

@{example} {}
---

(stylesheet
  (variable_def (variable (variable_name)) (plain_value))
  (variable_def (variable (variable_name)) 
    (plain_value
      (interpolated_variable (variable_name))))
  (variable_def (variable (variable_name)) 
    (plain_value
      (interpolated_variable (variable_name))))
  (variable_def (variable (variable_name)) 
    (plain_value
      (interpolated_variable (variable_name))))
  (variable_def (variable (variable_name))
    (plain_value
      (interpolated_variable (variable_name))))
  (variable_def (variable (variable_name)) (plain_value))
  (variable_def (variable (variable_name)) 
    (plain_value
      (interpolated_variable (variable_name))))
  (variable_def (variable (variable_name)) 
    (plain_value
      (interpolated_variable (variable_name))))
  (variable_def (variable (variable_name)) 
    (plain_value
      (interpolated_variable (variable_name))))
  (variable_def (variable (variable_name))
    (plain_value
      (interpolated_variable (variable_name))))
  (rule_set
    (selectors
      (tag_name (interpolated_variable (variable_name))))
    (block))
  )

=========================
Mixins
=========================

#example() {}
.example();

.nested-example() {
  .nested() {
  }
}

.nested-example.nested();
---

(stylesheet
  (mixin_def
    (id_selector (id_name))
    (params)
    (block))
  (mixin (class_selector (class_name))
    (arguments))
  (mixin_def
    (class_selector (class_name))
    (params)
    (block
      (mixin_def
        (class_selector (class_name))
        (params)
        (block))))
  (mixin (class_selector (class_name)) (class_selector (class_name))
    (arguments))
  )

=========================
Mixins Guards
=========================
@var: 5;
.example() when not (@var < 5){}
.example();

.nested-example() {
  .nested() when (@var > 0) and (@var < 5) {
    width: 10px;
  }
}

.nested-example.nested();
---

(stylesheet
  (variable_def (variable (variable_name)) (integer_value))
  (mixin_def
    (class_selector (class_name))
    (params)
    (guard
      (guard_unary_expression
        (binary_expression
          (variable (variable_name))
          (integer_value))))
    (block))
  (mixin (class_selector (class_name))
    (arguments))
  (mixin_def
    (class_selector (class_name))
    (params)
    (block
      (mixin_def
        (class_selector (class_name))
        (params)
        (guard
          (guard_binary_expression
            (binary_expression
              (variable (variable_name))
              (integer_value))
            (binary_expression
              (variable (variable_name))
              (integer_value))))
        (block
          (declaration (property_name) (integer_value (unit)))))))
  (mixin (class_selector (class_name)) (class_selector (class_name))
    (arguments))
  )


=========================
Id selectors
=========================

#some-id, a#another-id {}

---

(stylesheet
  (rule_set
    (selectors (id_selector (id_name)) (compound_selector (tag_name) (id_selector (id_name))))
    (block)))

=========================
Attribute selectors
=========================

[a] {}
[b=c] {}
[d~=e] {}
a[b] {}

---

(stylesheet
  (rule_set (selectors (attribute_selector (attribute_name))) (block))
  (rule_set (selectors (attribute_selector (attribute_name) (plain_value))) (block))
  (rule_set (selectors (attribute_selector (attribute_name) (plain_value))) (block))
  (rule_set (selectors (compound_selector (tag_name) (attribute_selector (attribute_name)))) (block)))

=========================
Pseudo-class selectors
=========================

a:hover {}
:nth-child(2) {}

---

(stylesheet
  (rule_set
    (selectors (compound_selector (tag_name) (pseudo_class_selector (class_name))))
    (block))
  (rule_set
    (selectors (pseudo_class_selector (class_name) (arguments (integer_value))))
    (block)))

=========================
Pseudo-element selectors
=========================

a::first-line {}

---

(stylesheet
  (rule_set
    (selectors (compound_selector (tag_name) (pseudo_element_selector (tag_name))))
    (block)))

=========================
Slash selectors
=========================

/deep/ {}
/deep/ svg {}

---

(stylesheet
  (rule_set
    (selectors
      (slash_selector))
    (block))
  (rule_set
    (selectors
      (descendant_selector
        (slash_selector)
        (tag_name)))
    (block)))

=========================
Child selectors
=========================

a > b {}
c > d > e {}

---

(stylesheet
  (rule_set
    (selectors (child_selector (tag_name) (tag_name)))
    (block))
  (rule_set
    (selectors (child_selector
      (child_selector (tag_name) (tag_name))
      (tag_name)))
    (block)))

=========================
Descendant selectors
=========================

a b {}
c d e {}

---

(stylesheet
  (rule_set
    (selectors (descendant_selector (tag_name) (tag_name)))
    (block))
  (rule_set
    (selectors (descendant_selector
      (descendant_selector (tag_name) (tag_name))
      (tag_name)))
    (block)))

===========================
Nesting selectors
===========================

a {
  &.b {}
  & c {}
  & > d {}
}

---

(stylesheet
  (rule_set
    (selectors (tag_name))
    (block
      (rule_set (selectors (compound_selector  (nesting_selector) (class_selector (class_name)))) (block))
      (rule_set (selectors (descendant_selector (nesting_selector) (tag_name))) (block))
      (rule_set (selectors (child_selector (nesting_selector) (tag_name))) (block)))))

===========================
Sibling selectors
===========================

a.b ~ c.d {}
.e.f + .g.h {}

---

(stylesheet
  (rule_set
    (selectors (sibling_selector
      (compound_selector (tag_name) (class_selector (class_name)))
      (compound_selector (tag_name) (class_selector (class_name)))))
    (block))
  (rule_set
    (selectors (adjacent_sibling_selector
      (compound_selector (class_selector (class_name)) (class_selector (class_name)))
      (compound_selector (class_selector (class_name)) (class_selector (class_name)))))
    (block)))

===========================
The :not selector
===========================

a:not(:hover) {}
.b:not(c > .d) {}

---

(stylesheet
  (rule_set
    (selectors 
      (compound_selector
        (tag_name)
        (pseudo_class_selector
          (class_name)
          (arguments (pseudo_class_selector (class_name))))))
    (block))
  (rule_set
    (selectors 
      (compound_selector
        (class_selector (class_name))
        (pseudo_class_selector
          (class_name)
          (arguments (child_selector (tag_name) (class_selector (class_name)))))))
    (block)))
